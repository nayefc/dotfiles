#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
# Usage: bootstrap [optional arg stow package]

# Setup:
# 1. Place your dotfiles in a directory named after the package appropriately.
# For example:
#  ├── bash
#  │   ├── .bash_profile
#  │   └── .bashrc
#  ├── git
#  │   ├── .git-completion.sh
#  │   ├── .gitconfig
#  │   ├── .gitconfig.erb
#  │   ├── .gitignore_global
#
# 2. Add .erb to any file that requires templating. Keep this to minimal.
# 3. Add the package to the $supported_packages hash
# 4. Set up your package in stow() if needed. To template a file,  use the
#    template(template_file, variable_hash, result_file) function. See :git
#    package as an example below.
# 5. In stow, you may need to install any packages/dependecies using your package
#    manager.

require 'erb'
require 'ostruct'
require 'fileutils'
# require './utils'

$linux = 'linux'
$osx = 'darwin'
$all = [$linux, $osx]
$platform = (RUBY_PLATFORM.include? $osx) ? $osx : $linux


module PackageModule
  @@osx_packages = []
  @@linux_packages = []
  def osx_packages
    return @@osx_packages
  end
  def linux_packages
    return @@linux_packages
  end
  def install_osx
    @@osx_packages.each do |package|
      unless system("brew install #{package}")
        puts "Error installing #{package}"
      end
    end
  end
  def install_packages(platform)
    if $platform.include? $osx
      PackageModule.install_osx
    end
  end
  def pre_stow
  end
end

class Setup
  include PackageModule
  def pre_stow
    if $platform.include? $osx
      unless system("brew bundle")
        puts "There was an error installing OS X brews from Brewfile."
      end
      File.open('/Users/nayef/.pyenv/default-packages', 'w') {
        |f| f.write("pylint\nipdb\njedi\n#jediepcserver")
      }
    end
  end
end

class Bash
  include PackageModule
  def pre_stow
    if File.exist?('../.bash_profile')
      FileUtils.mv('../.bash_profile', '../.bash_profile.bak', :force => true)
    end
    if File.exist?('../.bashrc')
      FileUtils.mv('../.bashrc', '../.bashrc.bak', :force => true)
    end
  end
end

module Tmux
  include PackageModule
  @@osx_packages = ['tmux']
end

module Git
  include PackageModule
  def pre_stow
    email = 'nrcopty@gmail.com' # TODO: get email using stdin
    template('git/.gitconfig.erb', {:git_email => email}, 'git/.gitconfig')
  end
end

module Emacs
  include PackageModule
  @@osx_packages = ['emacs', 'cask']
end

module Ssh
  include PackageModule
end

module Stow

  @@supported_packages = {
    :setup => {
      :platforms => $all,
      :module => Setup
    },
    :bash => {
      :platforms => $all,
      :module => Bash
    },
    :tmux => {
      :platforms => $all,
      :module => Tmux
    },
    :git => {
      :platforms => $all,
      :module => Git
    },
    :emacs => {
      :platforms => $all,
      :module => Emacs
    },
    :ssh => {
      :platforms => $linux,
      :module => Ssh
    },
  }

  def supported_packages
    return @@supported_packages
  end

  def self.stow(package_name)
    unless @@supported_packages.include? package_name
      puts "No package called #{package_name}"
      return
    end

    unless @@supported_packages[package_name][:platforms].include? $platform
      puts "Package #{package_name} not supported on this platform"
      return
    end

    package_obj = @@supported_packages[package_name][:module]
    package_obj.install_packages($platform)
    package_obj.pre_stow

    if package_name == :setup
      return
    end

    unless system("stow #{package_name.to_s}") and x == 2
      puts "There was an error stowing #{package_name}."
    end
  end

  def self.stow_packages(packages)
    if packages.empty?
      $supported_packages.each do |pkg, platform|
        puts "Stowing #{pkg}"
        Stow::stow pkg.to_sym
      end
    else
      packages.each do |pkg, platform|
        puts "Stowing #{pkg}"
        Stow::stow(pkg.to_sym)
      end
    end
  end

  def self.template(template_file, variable_hash, result_file)
    erb = ERB.new(File.read(template_file))
    namespace = OpenStruct.new(variable_hash)
    result = erb.result(namespace.instance_eval { binding })
    File.write(result_file, result)
  end


end

if __FILE__ == $0

  unless system("git submodule update --init --recursive")
    puts "There was an error updating git submodule."
  end

  if $platform.include? $osx
    unless `brew install stow`
      puts "There was an error installing stow."
      return
    end
  else
    unless system("sudo yum install stow")
      puts "There was an error installing stow."
      return
    end
  end

  Stow::stow_packages ARGV

end
